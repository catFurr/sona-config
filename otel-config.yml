receivers:
  prometheus:
    config:
      scrape_configs:
        - job_name: "prosody"
          scrape_interval: 120s
          static_configs:
            - targets: ["prosody:5280"]
          metrics_path: "/metrics"

        - job_name: "jicofo"
          scrape_interval: 120s
          static_configs:
            - targets: ["jicofo:8888"]
          metrics_path: "/metrics"

        - job_name: "jvb"
          scrape_interval: 120s
          static_configs:
            - targets: ["jvb:8080"]
          metrics_path: "/metrics"

        - job_name: "keycloak"
          scrape_interval: 180s
          static_configs:
            - targets: ["keycloak:9000"]
          metrics_path: "/auth/metrics"

  # Docker container stats for automatic container metadata
  docker_stats:
    endpoint: unix:///var/run/docker.sock
    collection_interval: 120s
    timeout: 5s
    api_version: "1.44"

  filelog:
    include:
      - /var/lib/docker/containers/*/*-json.log
    include_file_path: true
    start_at: end
    poll_interval: 5s
    operators:
      # Parse Docker JSON log format
      - type: json_parser
        parse_from: body
        parse_to: attributes
      # Extract container ID from file path
      - type: regex_parser
        regex: "/var/lib/docker/containers/(?P<container_id>[^/]+)/"
        parse_from: attributes["log.file.path"]
        parse_to: resource
      # Move log content to body
      - type: move
        from: attributes.log
        to: body
      # Extract container labels (added by Docker by logging.options.labels)
      - type: move
        from: attributes.attrs.app
        to: attributes.container_name
      # Parse Docker timestamp
      - type: time_parser
        parse_from: attributes.time
        layout: "%Y-%m-%dT%H:%M:%S.%fZ"
      # Clean up attributes
      - type: remove
        field: attributes["log.file.path"]
      - type: remove
        field: attributes["log.file.name"]

processors:
  batch: {}

  # Global resource processor to add server-wide attributes to ALL telemetry data
  resource:
    attributes:
      - key: service.name
        value: "${env:SERVER_NAME:-unknown}"
        action: upsert
      - key: deployment.environment
        value: "${env:ENVIRONMENT:-production}"
        action: upsert
      - key: deployment.region
        value: "${env:REGION:-paris-1}"
        action: upsert

exporters:
  otlphttp/grafana_cloud:
    endpoint: "https://otlp-gateway-prod-eu-west-2.grafana.net/otlp"
    auth:
      authenticator: basicauth/grafana_cloud

extensions:
  basicauth/grafana_cloud:
    client_auth:
      username: "${GRAFANA_USERNAME}"
      password: "${GRAFANA_API_KEY}"

service:
  extensions: [basicauth/grafana_cloud]
  telemetry:
    metrics:
      level: none
  pipelines:
    metrics:
      receivers: [prometheus, docker_stats] # ,hostmetrics]
      processors: [resource, batch]
      exporters: [otlphttp/grafana_cloud]
    logs:
      receivers: [filelog]
      processors: [resource, batch] # ,filter/target_containers]
      exporters: [otlphttp/grafana_cloud]
