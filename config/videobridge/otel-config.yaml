# To limit exposure to denial of service attacks, change the host in endpoints below from 0.0.0.0 to a specific network interface.
# See https://github.com/open-telemetry/opentelemetry-collector/blob/main/docs/security-best-practices.md#safeguards-against-denial-of-service-attacks

receivers:
    filelog/docker_json:
        include: ["/var/lib/docker/containers/*/*-json.log"]
        # include_file_path and include_file_name are true by default and add
        # attributes: log.file.path, log.file.path_resolved, log.file.name
        start_at: end
        operators:
            # Parse the JSON log line written by Docker's json-file logging driver
            - type: json_parser
              # Docker's json-file format: {"log":"<log_message>","stream":"<stdout/stderr>","time":"<timestamp>", "tag":"<configured_tag>"}
              parse_to: attributes # Parse all fields into attributes, including the new 'tag'
              timestamp:
                  layout_type: gotime # Use Go time parsing
                  layout: "2006-01-02T15:04:05.999999999Z" # Go's reference time for RFC3339Nano
                  parse_from: attributes.time
              severity:
                  parse_from: attributes.stream # 'stream' field (stdout/stderr)
                  mapping:
                      stdout: INFO
                      stderr: ERROR
            # The log message is in 'attributes.log' after json_parser. Move it to the official 'body'.
            - type: move
              from: attributes.log
              to: body
            # Extract container name, image name, and ID from the tag.
            # The 'tag' attribute comes from Docker's logging options.
            # Example tag: myproject_jvb_1/jitsi/jvb:latest/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
            - type: regex_parser
              if: attributes.tag != nil # Only process if tag exists
              source: attributes.tag
              regex: "^(?P<container_name>[^/]+)/(?P<container_image_name>[^/]+(?:/[^/]+)?(?:[:@][^/]+)?)/(?P<container_id>[0-9a-f]{12,64})$"
              # This regex attempts to be flexible with image names that might contain a registry path and/or tag/digest.
              # It adds attributes["container_name"], attributes["container_image_name"], and attributes["container_id"]
            # Convert underscored attributes to dotted ones
            - type: move
              if: attributes.container_name != nil
              from: attributes.container_name
              to: attributes["container.name"]
            - type: move
              if: attributes.container_image_name != nil
              from: attributes.container_image_name
              to: attributes["container.image.name"]
            - type: move
              if: attributes.container_id != nil
              from: attributes.container_id
              to: attributes["container.id"]

    hostmetrics:
        # Optional. Host Metrics Receiver added as an example of Infra Monitoring capabilities of the OpenTelemetry Collector
        # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/hostmetricsreceiver
        collection_interval: 90s
        resource:
            service.name: "system-metrics"
        scrapers:
            cpu:
            memory:
            disk:
            filesystem:
            network:
            load:
            #process:

    prometheus:
        config:
            scrape_configs:
                - job_name: "jvb"
                  scrape_interval: 120s
                  static_configs:
                      - targets: ["jvb:8080"]
                        labels:
                            service: "jvb"
                  metrics_path: "/metrics"

processors:
    batch:
    # https://github.com/open-telemetry/opentelemetry-collector/tree/main/processor/batchprocessor
    resourcedetection:
        # Enriches telemetry data with resource information from the host
        # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/resourcedetectionprocessor
        detectors: ["env", "system"]
        override: false
    transform/drop_unneeded_resource_attributes:
        # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/transformprocessor
        error_mode: ignore
        trace_statements:
            - context: resource
              statements:
                  - delete_key(resource.attributes, "k8s.pod.start_time")
                  - delete_key(resource.attributes, "os.description")
                  - delete_key(resource.attributes, "os.type")
                  - delete_key(resource.attributes, "process.command_args")
                  - delete_key(resource.attributes, "process.executable.path")
                  - delete_key(resource.attributes, "process.pid")
                  - delete_key(resource.attributes, "process.runtime.description")
                  - delete_key(resource.attributes, "process.runtime.name")
                  - delete_key(resource.attributes, "process.runtime.version")
        metric_statements:
            - context: resource
              statements:
                  - delete_key(resource.attributes, "k8s.pod.start_time")
                  - delete_key(resource.attributes, "os.description")
                  - delete_key(resource.attributes, "os.type")
                  - delete_key(resource.attributes, "process.command_args")
                  - delete_key(resource.attributes, "process.executable.path")
                  - delete_key(resource.attributes, "process.pid")
                  - delete_key(resource.attributes, "process.runtime.description")
                  - delete_key(resource.attributes, "process.runtime.name")
                  - delete_key(resource.attributes, "process.runtime.version")
        log_statements:
            - context: resource
              statements:
                  - delete_key(resource.attributes, "k8s.pod.start_time")
                  - delete_key(resource.attributes, "os.description")
                  - delete_key(resource.attributes, "os.type")
                  - delete_key(resource.attributes, "process.command_args")
                  - delete_key(resource.attributes, "process.executable.path")
                  - delete_key(resource.attributes, "process.pid")
                  - delete_key(resource.attributes, "process.runtime.description")
                  - delete_key(resource.attributes, "process.runtime.name")
                  - delete_key(resource.attributes, "process.runtime.version")
    transform/add_resource_attributes_as_metric_attributes:
        # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/transformprocessor
        error_mode: ignore
        metric_statements:
            - context: datapoint
              statements:
                  - set(attributes["deployment.environment"], resource.attributes["deployment.environment"])
                  - set(attributes["service.version"], resource.attributes["service.version"])

exporters:
    otlphttp/grafana_cloud:
        # https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter/otlphttpexporter
        endpoint: "https://otlp-gateway-prod-eu-west-2.grafana.net/otlp"
        auth:
            authenticator: basicauth/grafana_cloud

extensions:
    basicauth/grafana_cloud:
        # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/extension/basicauthextension
        client_auth:
            username: "${GC_OTLP_USER}"
            password: "${GC_OTLP_PASSWORD}"

connectors:
    grafanacloud:
        # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/connector/grafanacloudconnector
        host_identifiers: ["host.name"]

service:
    extensions: [basicauth/grafana_cloud]

    telemetry:
        metrics:
            level: none # Disables internal metrics collection
            #address: 0.0.0.0:8889  # Changed from default 8888

    pipelines:
        #traces:
        #  receivers: []
        #  processors:
        #    [resourcedetection, transform/drop_unneeded_resource_attributes, batch]
        #  exporters: [otlphttp/grafana_cloud, grafanacloud]

        metrics:
            receivers: [prometheus, hostmetrics]
            processors:
                [
                    resourcedetection,
                    transform/drop_unneeded_resource_attributes,
                    transform/add_resource_attributes_as_metric_attributes,
                    batch,
                ]
            exporters:
                [otlphttp/grafana_cloud]

                #metrics/grafanacloud:
                #receivers: [grafanacloud]
                #processors: [batch]
                #exporters: [otlphttp/grafana_cloud]

        logs:
            receivers: [filelog/docker_json]
            processors: [resourcedetection, transform/drop_unneeded_resource_attributes, batch]
            exporters: [otlphttp/grafana_cloud]
