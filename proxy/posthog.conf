# Redirect HTTP to HTTPS for PostHog proxy domain
server {
    listen 80;
    listen [::]:80;
    server_name {{ .Env.POSTHOG_DOMAIN }};

    return 301 https://$host$request_uri;
}


# HTTPS server for PostHog proxy (e.g., e.sonacove.com)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name {{ .Env.POSTHOG_DOMAIN }};

    # Certificates for the proxy domain
    ssl_certificate /etc/ssl/certs/{{ .Env.POSTHOG_DOMAIN }}.crt;
    ssl_certificate_key /etc/ssl/private/{{ .Env.POSTHOG_DOMAIN }}.key;

    # Use relaxed global rate limit defined in general.conf
    limit_req zone=global burst=200;

    # Connection timeouts
    send_timeout 30s;
    keepalive_timeout 15s;

    # CORS helper: common headers for ingestion endpoints
    set $cors_allow_origin "*";

    # Health check
    location = /_health {
        add_header Content-Type text/plain always;
        return 200 "OK";
    }

    # Handle CORS preflight globally for common PostHog endpoints
    location ~ ^/(e/|i/|decide|capture|batch|s/|static/) {
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' $cors_allow_origin always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With' always;
            add_header 'Access-Control-Max-Age' 86400 always;
            add_header 'Vary' 'Origin' always;
            return 204;
        }
    }

    # Ingestion endpoints → PostHog ingestion API (EU)
    # Docs: https://posthog.com/docs/advanced/proxy
    location ~ ^/(e/|i/|decide|capture|batch)$ {
        proxy_pass https://eu.i.posthog.com$request_uri;
        proxy_ssl_server_name on;
        proxy_redirect off;

        # Ensure upstream host header matches PostHog
        proxy_set_header Host eu.i.posthog.com;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;

        # Remove cookies to avoid CORS/cookie issues
        proxy_set_header Cookie "";

        # CORS headers
        add_header 'Access-Control-Allow-Origin' $cors_allow_origin always;
        add_header 'Vary' 'Origin' always;

        # Buffering is OK for ingestion
        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 16 8k;

        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 60s;
    }

    # Static assets (JS snippet, etc.) → PostHog assets host (EU)
    # This allows loading /static/... via the same domain
    location ^~ /static/ {
        proxy_pass https://eu-assets.i.posthog.com$request_uri;
        proxy_ssl_server_name on;
        proxy_redirect off;
        proxy_set_header Host eu-assets.i.posthog.com;

        # Cache static aggressively (respect upstream cache headers)
        proxy_cache_valid 200 301 302 24h;
        proxy_cache_bypass $http_pragma $http_authorization;

        add_header 'Access-Control-Allow-Origin' $cors_allow_origin always;
        add_header 'Vary' 'Origin' always;

        proxy_connect_timeout 15s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Default: forward anything else to ingestion API (safe fallback)
    location / {
        proxy_pass https://eu.i.posthog.com$request_uri;
        proxy_ssl_server_name on;
        proxy_redirect off;
        proxy_set_header Host eu.i.posthog.com;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header Cookie "";

        add_header 'Access-Control-Allow-Origin' $cors_allow_origin always;
        add_header 'Vary' 'Origin' always;

        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 60s;
    }
}

